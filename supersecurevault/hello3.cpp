//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// ------------------------ Structures ------------------------

struct _IO_FILE {
    int32_t e0;
};

// ------------------- Function Prototypes --------------------

int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6);
int64_t function_1000(void);
void function_1030(int64_t * ptr);
int32_t function_1040(char * s);
int32_t function_1050(char * s, char * reject);
char * function_1060(char * s, int32_t n, struct _IO_FILE * stream);
int32_t function_1070(char * s1, char * s2);
int64_t * function_1080(int64_t * dest, int64_t * src, int32_t n);
int64_t * function_1090(int32_t size);
void function_10a0(int32_t status);
void function_10b0(int64_t * d);
int64_t function_10f0(void);
int64_t function_1120(void);
int64_t function_1160(void);
int64_t function_11a0(void);
int64_t function_11a9(void);
int64_t function_124a(void);
int64_t function_12e8(void);

// --------------------- Global Variables ---------------------

int64_t g1 = 0x5b5b0c100c0a070d; // 0x201e
int64_t g2 = 0; // 0x3fe0
struct FILE * g3 = NULL; // 0x4050
char g4 = 0; // 0x4058
int32_t g5;

// ------- Dynamically Linked Functions Without Header --------

void __cxa_finalize(int64_t * a1);
void __gmon_start__(void);
int32_t __libc_start_main(int64_t a1, int32_t a2, char ** a3, void (*a4)(), void (*a5)(), void (*a6)());

// ------------------------ Functions -------------------------

// Address range: 0x1000 - 0x1017
int64_t function_1000(void) {
    int64_t result = 0; // 0x100e
    if (*(int64_t *)0x3fd0 != 0) {
        // 0x1010
        __gmon_start__();
        //Abhi result = &g5;
        result = g5;
    }
    // 0x1012
    return result;
}

// Address range: 0x1030 - 0x1036
void function_1030(int64_t * ptr) {
    // 0x1030
    free(ptr);
}

// Address range: 0x1040 - 0x1046
int32_t function_1040(char * s) {
    // 0x1040
    return puts(s);
}

// Address range: 0x1050 - 0x1056
int32_t function_1050(char * s, char * reject) {
    // 0x1050
    return strcspn(s, reject);
}

// Address range: 0x1060 - 0x1066
char * function_1060(char * s, int32_t n, struct _IO_FILE * stream) {
    // 0x1060
    return fgets(s, n, stream);
}

// Address range: 0x1070 - 0x1076
int32_t function_1070(char * s1, char * s2) {
    // 0x1070
    return strcmp(s1, s2);
}

// Address range: 0x1080 - 0x1086
int64_t * function_1080(int64_t * dest, int64_t * src, int32_t n) {
    // 0x1080
    return memcpy(dest, src, n);
}

// Address range: 0x1090 - 0x1096
int64_t * function_1090(int32_t size) {
    // 0x1090
    return malloc(size);
}

// Address range: 0x10a0 - 0x10a6
void function_10a0(int32_t status) {
    // 0x10a0
    exit(status);
}

// Address range: 0x10b0 - 0x10b6
void function_10b0(int64_t * d) {
    // 0x10b0
    __cxa_finalize(d);
}

// Address range: 0x10c0 - 0x10e2
int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {
    // 0x10c0
    int64_t v1; // 0x10c0
    __libc_start_main(0x124a, (int32_t)a6, (char **)&v1, NULL, NULL, (void (*)())a3);
    __asm_hlt();
    // UNREACHABLE
}

// Address range: 0x10f0 - 0x1119
int64_t function_10f0(void) {
    // 0x10f0
    return (int64_t)&g3;
}

// Address range: 0x1120 - 0x1159
int64_t function_1120(void) {
    // 0x1120
    return 0;
}

// Address range: 0x1160 - 0x1199
int64_t function_1160(void) {
    // 0x1160
    if (g4 != 0) {
        // 0x1198
        int64_t result; // 0x1160
        return result;
    }
    // 0x116d
    if (g2 != 0) {
        // 0x117b
        __cxa_finalize((int64_t *)*(int64_t *)0x4048);
    }
    int64_t result2 = function_10f0(); // 0x1187
    g4 = 1;
    return result2;
}

// Address range: 0x11a0 - 0x11a9
int64_t function_11a0(void) {
    // 0x11a0
    return function_1120();
}

// Address range: 0x11a9 - 0x124a
int64_t function_11a9(void) {
    int64_t * mem = (int64_t)malloc(27); // 0x11b6 //Abhi
    if (mem == NULL) {
        // 0x11c6
        puts("Memory allocation failed.");
        exit(1);
        // UNREACHABLE
    }
    int64_t mem2 = (int64_t)malloc(27); // 0x11e4
    memcpy(mem, &g1, 27);
    for (int64_t i = 0; i < 27; i++) {
        char v1 = *(char *)(i + (int64_t)mem); // 0x1222
        *(char *)(i + mem2) = v1 ^ 107;
    }
    // 0x1241
    return (int64_t)"tomper!";
}

// Address range: 0x124a - 0x12e8
int64_t function_124a(void) {
    // 0x124a
    puts("Enter the password");
    int64_t str; // bp-88, 0x124a
    fgets((char *)&str, 64, g3);
    int32_t ini_seg_bytes = strcspn((char *)&str, "\n"); // 0x128a
    int64_t v1; // bp-8, 0x124a
    *(char *)((int64_t)&v1 - 80 + (int64_t)ini_seg_bytes) = 0;
    int32_t strcmp_rc = strcmp((char *)&str, "Sup3rS3cr3tP@ass"); // 0x12a5
    char * str2 = "Noob"; // 0x12ac
    if (strcmp_rc == 0) {
        // 0x12ae
        str2 = (char *)function_11a9();
    }
    // 0x12c9
    puts(str2);
    free((int64_t *)str2);
    return 0;
}

// Address range: 0x12e8 - 0x12f1
int64_t function_12e8(void) {
    // 0x12e8
    int64_t result; // 0x12e8
    return result;
}

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (13.2.0)
// Detected functions: 18

